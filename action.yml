name: 'Crunchy Database Deployment'
description: 'Deploy a Crunchy PostgreSQL database to OpenShift'

inputs:
  directory:
    description: 'Crunchy Chart directory'
    default: 'charts/crunchy'
    required: false
    validation: "^.+$"
  oc_server:
    description: 'OpenShift server'
    default: 'https://api.silver.devops.gov.bc.ca:6443'
    required: false
    validation: "^https?://.+:6443$"
  environment:
    description: 'Environment name; omit for PRs'
    required: false
    validation: "^.+$"
  values_file:
    description: 'Path to the values.yml file to use for the deployment'
    required: true
    validation: "^.+\\.(yml|yaml)$"
  enabled:
    description: 'Enable the deployment of the crunchy database, easy switch to turn it on/off'
    default: true
    required: false
    type: boolean
  triggers:
    description: 'Paths used to trigger a deployment; e.g. (./backend/ ./frontend/).'
    required: false
    validation: "^(.+)$"
  ref:
    # This should be an empty string by default, but can be set to a specific branch/tag/sha
    description: 'Git ref to use; e.g. branch, tag, sha'
    default: ''
    required: false
  repository:
    description: 'GitHub repository; e.g. org/repo'
    default: bcgov/action-crunchy
    required: false
    validation: "^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$"
  oc_namespace:
    description: 'OpenShift namespace'
    required: true
    validation: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
  oc_token:
    description: 'OpenShift token'
    required: true
    validation: "^[A-Za-z0-9-_]+$"
  s3_access_key:
    description: 'S3 access key'
    required: false
  s3_secret_key:
    description: 'S3 secret key'
    required: false
  s3_bucket:
    description: 'S3 bucket'
    required: false
  s3_endpoint:
    description: 'S3 endpoint'
    required: false
  force_cleanup:
    description: 'Force cleanup of the database'
    default: false
    required: false
    type: boolean

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        # Variables and Inputs

        # Release and cluster name; based on a hash of the repository name
        RELEASE_NAME=pg-$(echo -n "${{github.event.repository.name}}" | md5sum | cut -c 1-8)
        CLUSTER_NAME=${RELEASE_NAME}-crunchy

        # Process vars and send to GITHUB_ENV
        for var in RELEASE_NAME CLUSTER_NAME; do
          if [ -n "${!var}" ]; then
            echo "${var}=${!var}"
            echo "${var}=${!var}" >> $GITHUB_ENV
          else
            echo "Warning: ${var} is not set."
            exit 1
          fi
        done

    - shell: bash
      if: github.event.action != 'closed'
      run: |
        # Variables and Inputs (!= closed)

        # Enable S3 backups if all required vars are set
        s3_vars=("${{ inputs.s3_access_key }}" "${{ inputs.s3_secret_key }}" "${{ inputs.s3_bucket }}" "${{ inputs.s3_endpoint }}")
        if [ "${#s3_vars[@]}" -eq 4 ]; then
          echo "All S3 configuration variables are present. Enabling S3 backups."
          S3_ENABLED=true
        elif [ "$s3_vars_count" -gt 0 ]; then
          echo "Warning: Some S3 configuration variables are set, but not all. Please ensure all S3 variables are configured."
          exit 1
        else
          echo "S3 configuration not set. Disabling S3 backups."
        fi

        # Construct values.yml URL (ref_name = PR, ref_name = merge, default_branch = default)
        BRANCH_OR_REF="${{ github.head_ref || github.ref_name || github.event.repository.default_branch }}"
        VALUES_URL="https://raw.githubusercontent.com/${{ github.repository }}/${BRANCH_OR_REF}/${{ inputs.values_file }}"

        # Validate values.yml URL
        if ! curl --output /dev/null --silent --head --fail "${VALUES_URL}"; then
          echo "Error: The constructed values.yml URL is invalid or inaccessible: ${VALUES_URL}"
          exit 1
        fi

        # Process vars and send to GITHUB_ENV
        for var in S3_ENABLED VALUES_URL; do
          if [ -n "${!var}" ]; then
            echo "${var}=${!var}"
            echo "${var}=${!var}" >> $GITHUB_ENV
          else
            echo "Warning: ${var} is not set."
            exit 1
          fi
        done

    - uses: bcgov/action-oc-runner@v1.2.1
      id: deploy
      # avoid running on PR close event, which unnecessarily patches the cluster.
      if: github.event.action != 'closed' || inputs.force_cleanup == 'true'
      with:
        oc_namespace: "${{ inputs.oc_namespace }}"
        oc_token: "${{ inputs.oc_token }}"
        oc_server: "${{ inputs.oc_server }}"
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        triggers: "${{ inputs.triggers }}"
        commands: |
          # Check if S3 inputs are provided and construct the deploy_db.sh command accordingly
          PARAMS="${{ inputs.directory }} ${VALUES_URL} ${{ github.event.repository.name }} ${RELEASE_NAME}"

          if [ -n "${{ inputs.s3_access_key }}" ] && [ -n "${{ inputs.s3_secret_key }}" ] && [ -n "${{ inputs.s3_bucket }}" ] && [ -n "${{ inputs.s3_endpoint }}" ]; then
            PARAMS+=" ${{ inputs.s3_access_key }} ${{ inputs.s3_secret_key }} ${{ inputs.s3_bucket }} ${{ inputs.s3_endpoint }}"
          fi

          # Execute the deploy command
          echo ./scripts/deploy_db.sh $PARAMS
          ./scripts/deploy_db.sh $PARAMS

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}@${{ inputs.ref }}
        ref: ${{ inputs.ref }}

    - if: steps.deploy.outputs.triggered == 'true' && github.event_name == 'pull_request'
      shell: bash
      run: |
        # Add user to Crunchy DB
        ./scripts/user_change.sh add "${{ github.event.number }}" "${CLUSTER_NAME}"

    - uses: bcgov/action-oc-runner@v1.2.1
      if: github.event.action == 'closed' || inputs.force_cleanup == 'true'
      with:
        oc_namespace: "${{ inputs.oc_namespace }}"
        oc_token: "${{ inputs.oc_token }}"
        oc_server: "${{ inputs.oc_server }}"
        commands: |
          # Remove PR specific user from Crunchy DB
          ./scripts/user_change.sh remove "${{ github.event.number }}" "${CLUSTER_NAME}"
